# Scopes
Module          <- _ Code _EndOfFile
Code            <- (Statement / Expression)+
CodeBlock       <- _CBOP Code _CBCL
CodeOrBlock     <- CodeBlock / Code

# Expressions
Expression      <- Term
Term            <- Factor ((PLUS / MINUS) Factor)*
Factor          <- Power ((STAR / SLASH) Power)*
Power           <- Unary ((POWER / MOD) Unary)*
Unary           <- (PLUS / MINUS)? Primary
Primary         <- _PROP Expression _PRCL
                 / Value
                 / FunDef
                 / FunCall
                 / Identifier

# Function Declaration
FunDef          <- FN Identifier? DefParams CodeOrBlock
DefParams       <- _PROP DefParam? (_PARAMSEP DefParam)* _PRCL
DefParam        <- Identifier (_ASSIGN Expression)?

# Function Call
FunCall         <- (FunDef / Identifier) CallParams
CallParams      <- _PROP Expression? (_PARAMSEP Expression)* _PRCL

# Statements
Statement       <- ReturnStm / WhileStm / ForStm / IfStm / FunDef / Assignment
Assignment      <- Identifier _ASSIGN Expression

# Control Flow Statements
ForStm          <- FOR ForSteps CodeBlock
ForSteps        <- _PROP Assignment FORSEP Expression FORSEP Expression _PRCL
Test            <- _PROP Expression _PRCL
WhileStm        <- WHILE Test CodeOrBlock
IfStm           <- IF Test CodeOrBlock ElseStm?
ElseStm         <- ELSE CodeOrBlock
ReturnStm       <- RETURN Expression

# Values
Value           <- Number / String / BOOL
Number          <- BIN / HEX / FLOAT / DEC
String          <- _DQUOTE (!_DQUOTE .)* _DQUOTE _

# Lexcical Hierarchy

# Values
Identifier      <- [a-zA-Z_][a-zA-Z0-9_]*  _
DEC             <- [0-9]+                  _
FLOAT           <- [0-9]* '.' [0-9]+       _
BIN             <- '0b' [0-1]+             _
HEX             <- '0x' [0-9a-fA-F]+       _
BOOL            <- ('true' / 'false')      _

# Keywords
BREAK           <- 'break'        _
CASE            <- 'case'         _
CONTINUE        <- 'continue'     _
EACH            <- 'each'         _
ELSE            <- 'else'         _
FOR             <- 'for'          _
FN              <- 'fn'           _
WHILE           <- 'while'        _
IF              <- 'if'           _
MATCH           <- 'match'        _
RETURN          <- 'return'       _
SWITCH          <- 'switch'       _

# Lexical Delimiters
_DQUOTE         <- '"'
_PARAMSEP       <- ',' _
FORSEP          <- ';' _
_PROP           <- '(' _
_PRCL           <- ')' _
_CBOP           <- '{' _
_CBCL           <- '}' _
NEGATIVE        <- '-' _
_ASSIGN         <- '=' _

# Operators
PLUS            <- '+'  _
MINUS           <- '-'  _
STAR            <- '*'  _
SLASH           <- '/'  _
OLT             <- '<'  _
OLTE            <- '<=' _
OGT             <- '>'  _
OGTE            <- '>=' _
OEQ             <- '==' _
RSHIFT          <- '>>' _
LSHIFT          <- '<<' _

# Whitespace Handling
_               <- (Space / Comment)*
Comment         <- '#' (!_EndOfLine .)* _EndOfLine
Space           <- ' ' / '\t' / _EndOfLine
_EndOfLine      <- '\r\n' / '\n' / '\r'
_EndOfFile      <- !.
