# Scopes
Module          <- _ (Statement / Expression)+ _EndOfFile
Code            <- _CBOP (Statement / Expression)* _CBCL
                 / (Statement / Expression)

# Expressions
Expression      <- BitLogical
BitLogical      <- Comparison ((BAND / BXOR / BOR) Comparison)*
Comparison      <- BitShifting ((EQ / NEQ / LTE / GTE / LT / GT) BitShifting)*
BitShifting     <- Term ((RSHIFT / LSHIFT) Term)*

Term            <- Factor ((PLUS / MINUS) Factor)*
Factor          <- Power ((STAR / SLASH) Power)*
Power           <- Unary ((POWER / MOD) Unary)*
Unary           <- (PLUS / MINUS)? Attribute

Attribute       <- Attr (_DOT Attr)*
Attr            <- Call / Primary
Call            <- Primary CallParams
Primary         <- _PROP Expression _PRCL
                 / Value
                 / Lambda
                 / Identifier

# Function Declaration
Function        <- _FN Identifier Params Code
Lambda          <- _FN Params Code
Params          <- _PROP (Param (_COMA Param)*)? _PRCL
Param           <- Identifier (_ASSIGN Expression)?

# Function Call
CallParams      <- _PROP (Expression (_COMA Expression)*)? _PRCL

# Statements
Statement       <- ReturnStm / WhileStm / ForStm / IfStm / Function / Assignment / LexAssignment
Assignment      <- Identifier _ASSIGN Expression
LexAssignment   <- _LET Identifier _ASSIGN Expression

# Control Flow Statements
ForStm          <- _FOR ForSteps Code
ForSteps        <- _PROP (Expression / Assignment) _COMA Expression _COMA Expression _PRCL
Test            <- _PROP Expression _PRCL
WhileStm        <- _WHILE Test Code
IfStm           <- _IF Test Code ElseStm?
ElseStm         <- _ELSE Code
ReturnStm       <- _RETURN Expression

# Values
Value           <- Number / String / BOOL
Number          <- BIN / HEX / FLOAT / DEC
String          <- _DQUOTE (!_DQUOTE .)* _DQUOTE _

# Lexcical Hierarchy

# Values
Identifier      <- [a-zA-Z_][a-zA-Z0-9_]*  _
DEC             <- [0-9]+                  _
FLOAT           <- [0-9]* '.' [0-9]+       _
BIN             <- '0b' [0-1]+             _
HEX             <- '0x' [0-9a-fA-F]+       _
BOOL            <- ('true' / 'false')      _

# Keywords
_BREAK          <- 'break'        _
_CONTINUE       <- 'continue'     _
_ELSE           <- 'else'         _
_FOR            <- 'for'          _
_FN             <- 'fn'           _
_WHILE          <- 'while'        _
_IF             <- 'if'           _
_RETURN         <- 'return'       _
_LET            <- 'let'          _

# Lexical Delimiters
_DQUOTE         <- '"'
_COMA           <- ',' _
_PROP           <- '(' _
_PRCL           <- ')' _
_CBOP           <- '{' _
_CBCL           <- '}' _
_ASSIGN         <- '=' _

## Arithmetic Operators
PLUS            <- '+'  _
MINUS           <- '-'  _
STAR            <- '*'  _
SLASH           <- '/'  _
MOD             <- '%'  _
POWER           <- '**' _

## Comparison Operators
EQ              <- '==' _
NEQ             <- '!=' _
LT              <- '<'  _
GT              <- '>'  _
LTE             <- '<=' _
GTE             <- '>=' _

## Bit Shifting
RSHIFT          <- '>>' _
LSHIFT          <- '<<' _

## Binary Bit Operators
BAND            <- '&'  _
BOR             <- '|'  _
BXOR            <- '^'  _

## Member Access Operators
_DOT            <- '.' _

# Whitespace Handling
_               <- (Space / Comment)*
Comment         <- '#' (!_EOL .)* _EOL
Space           <- ' ' / '\t' / _EndOfLine
_EndOfLine      <- ';' / _EOL
_EOL            <- '\r\n' / '\n' / '\r'
_EndOfFile      <- !.
