# Scopes
Module          <- _ Code _EndOfFile
Code            <- (Statement / Expression)+
CodeBlock       <- _CBOP Code* _CBCL / Statement / Expression

# Expressions
Expression      <- BitLogical
BitLogical      <- Comparison ((BAND / BXOR / BOR) Comparison)*
Comparison      <- BitShifting ((EQ / NEQ / LTE / GTE / LT / GT) BitShifting)*
BitShifting     <- Term ((RSHIFT / LSHIFT) Term)*

Term            <- Factor ((PLUS / MINUS) Factor)*
Factor          <- Power ((STAR / SLASH) Power)*
Power           <- Unary ((POWER / MOD) Unary)*
Unary           <- (PLUS / MINUS)? Primary
Primary         <- _PROP Expression _PRCL
                 / Value
                 / FunCall
                 / FunDef
                 / Identifier

# Function Declaration
FunDef          <- _FN Identifier? DefParams CodeBlock
DefParams       <- _PROP DefParam? (_PARAMSEP DefParam)* _PRCL
DefParam        <- Identifier (_ASSIGN Expression)?

# Function Call
FunCall         <- (FunDef / Identifier) CallParams
CallParams      <- _PROP Expression? (_PARAMSEP Expression)* _PRCL

# Statements
Statement       <- ReturnStm / WhileStm / ForStm / IfStm / FunDef / Assignment
Assignment      <- Identifier _ASSIGN Expression

# Control Flow Statements
ForStm          <- _FOR ForSteps CodeBlock
ForSteps        <- _PROP (Expression / Assignment) _PARAMSEP Expression _PARAMSEP Expression _PRCL
Test            <- _PROP Expression _PRCL
WhileStm        <- _WHILE Test CodeBlock
IfStm           <- _IF Test CodeBlock ElseStm?
ElseStm         <- _ELSE CodeBlock
ReturnStm       <- _RETURN Expression

# Values
Value           <- Number / String / BOOL
Number          <- BIN / HEX / FLOAT / DEC
String          <- _DQUOTE (!_DQUOTE .)* _DQUOTE _

# Lexcical Hierarchy

# Values
Identifier      <- [a-zA-Z_][a-zA-Z0-9_]*  _
DEC             <- [0-9]+                  _
FLOAT           <- [0-9]* '.' [0-9]+       _
BIN             <- '0b' [0-1]+             _
HEX             <- '0x' [0-9a-fA-F]+       _
BOOL            <- ('true' / 'false')      _

# Keywords
_BREAK          <- 'break'        _
_CONTINUE       <- 'continue'     _
_ELSE           <- 'else'         _
_FOR            <- 'for'          _
_FN             <- 'fn'           _
_WHILE          <- 'while'        _
_IF             <- 'if'           _
_RETURN         <- 'return'       _

# Lexical Delimiters
_DQUOTE         <- '"'
_PARAMSEP       <- ',' _
_PROP           <- '(' _
_PRCL           <- ')' _
_CBOP           <- '{' _
_CBCL           <- '}' _
_ASSIGN         <- '=' _

## Arithmetic Operators
PLUS            <- '+'  _
MINUS           <- '-'  _
STAR            <- '*'  _
SLASH           <- '/'  _
MOD             <- '%'  _
POWER           <- '**' _

## Comparison Operators
EQ              <- '==' _
NEQ             <- '!=' _
LT              <- '<'  _
GT              <- '>'  _
LTE             <- '<=' _
GTE             <- '>=' _

## Bit Shifting
RSHIFT          <- '>>' _
LSHIFT          <- '<<' _

## Binary Bit Operators
BAND            <- '&'  _
BOR             <- '|'  _
BXOR            <- '^'  _

# Whitespace Handling
_               <- (Space / Comment)*
Comment         <- '#' (!_EOL .)* _EOL
Space           <- ' ' / '\t' / _EndOfLine
_EndOfLine      <- ';' / _EOL
_EOL            <- '\r\n' / '\n' / '\r'
_EndOfFile      <- !.
