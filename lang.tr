# -*- Mode: peg; -*-

Module     <- { "Module" { (Statement / Expression)+ } }
            / { "Module" (Statement / Expression) }
Code       <- { "Code" { (Statement / Expression)+ } }
            / { "Code" (Statement / Expression) }

Statement  <- { "Statement" Assignment }

Assignment <- { "Assignment" { Expression StoreName } }

Expression <- { "Expression" Unary }
            / { "Expression" Primary }
            / { "Expression" BinOp }
            / { "Expression" Lambda }
            / BinOp

BinOp      <- { "BinOp" { BINOP Primary Primary } }

BINOP      <- '**' / '+' / '-' / '*' / '/' / '%'
            / '==' / '!=' / '>=' / '<=' / '>' / '<'
            / '<<' / '>>' / '|' / '&' / '^'

Unary      <- { "Unary" Primary }
            / { "Unary" { UNOP Primary } }

UNOP       <- '-' / '+'

Primary    <- Value
            / Call
            / Lambda
            / Identifier
            / Expression

Lambda     <- { "Lambda" { Params Code } }
Params     <- { "Params" Atom }       # No Parameters

Param      <- { "Param" Identifier }

Call       <- { "Call" { Identifier CallParams } }  # One or more parameters
            / { "Call" Identifier }                 # No parameters

CallParams <- { Expression* } / Expression

Value      <- { "Value" Number }

Number     <- { "Number" Atom }
Identifier <- { "Identifier" Atom  }
StoreName  <- { "StoreName" Atom  }

Atom       <- !{ .* } .
