# -*- Mode: peg; -*-

Module     <- { "Module" { (Statement / Expression)+ } }
            / { "Module" (Statement / Expression) }
Code       <- { "Code" { (Statement / Expression)+ } }
            / { "Code" (Statement / Expression) }

Statement  <- { "Statement" Assignment }
Assignment <- { "Assignment" { Expression (Store / StoreLex) } }
Expression <- Attribute
            / Primary
            / Unary
            / BinOp

BinOp      <- { "BinOp" Expression Atom Expression }
Unary      <- { "Unary" { Atom Primary } }
Attribute  <- { "Attribute" { Load (LoadAttr / MethodCall)+ } }
            / { "Attribute" Load }
LoadAttr   <- { "LoadAttr" Atom }
LoadMethod <- { "LoadMethod" Atom }
MethodCall <- { "MethodCall" LoadMethod }
            / { "MethodCall" { LoadMethod CallParams } }

ScopeId    <- { "ScopeId" Atom }

Primary    <- Value
            / Lambda
            / Load
            / Expression
            / Call

Lambda     <- { "Lambda" { Params Code } }             # PreScopeAnalysis
            / { "Lambda" { ScopeId Params Code } }     # PostScopeAnalysis

Params     <- { "Params" { Param+ } }                  # Multiple
            / { "Params" Param }                       # Single
            / { "Params" }                             # None

Param      <- { "Param" Atom }

Call       <- { "Call" { (Load / Primary) CallParams } } # One or more parameters
            / { "Call" (Load / Primary) CallParams } # No parameters

CallParams <- { "CallParams" ({ Expression+ } / Expression / Atom)? }

# CallParams <- CallParamsMulti / CallParamsSingle / CallParamsNull / CallParamsNone

CallParamsMulti   <- { "CallParams" { Expression+ } }
CallParamsSingle  <- { "CallParams" Expression }
CallParamsNull    <- { "CallParams" Atom }
CallParamsNone    <- { "CallParams" }


Value      <- { "Value" Number }

Number     <- { "Number" Atom }

Load       <- { "Load" Atom  }
Store      <- { "Store" Atom  }
StoreLex   <- { "StoreLex" Atom  }

Atom       <- !{ .* } .
