# -*- Mode: peg; -*-

Module     <- { "Module" Code }
Code       <- { "Code" Expression }
            / { "Code" Statement }
            / { "Code" { (Statement / Expression)+ } }

Statement  <- { "Statement" Assignment }

Assignment <- { "Assignment" { Expression StoreName } }

Expression <- { "Expression" Unary }
            / { "Expression" Primary }
            / { "Expression" BinOp }
            / BinOp
# BinOp      <- { "BinOp" { BINOP Expression Expression }* }

BinOp      <- { "BinOp" { BINOP Primary Primary } }

BINOP      <- '**' / '+' / '-' / '*' / '/' / '%'
            / '==' / '!=' / '>=' / '<=' / '>' / '<'
            / '<<' / '>>' / '|' / '&' / '^'

Unary      <- { "Unary" Primary }   / Expression

Primary    <- Value
            / FunCall
            / Identifier
            / Expression

Value      <- { "Value" Number }

FunCall    <- { "FunCall" { Identifier FunParams } }  # One or more parameters
            / { "FunCall" Identifier }                # No parameters

FunParams  <- { Expression* }
            / Expression

Number     <- { "Number" Atom }
Identifier <- { "Identifier" Atom  }
StoreName  <- { "StoreName" Atom  }

Atom       <- !{ .* } .
