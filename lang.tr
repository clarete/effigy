# -*- Mode: peg; -*-

Module     <- { "Module" { (Statement / Expression)+ } }
            / { "Module" (Statement / Expression) }
Code       <- { "Code" { (Statement / Expression)+ } }
            / { "Code" (Statement / Expression) }

Statement  <- { "Statement" Assignment }
Assignment <- { "Assignment" { Expression (Store / StoreLex) } }
Expression <- Attribute / Primary / Unary / BinOp / Call

BinOp      <- { "BinOp" Expression Atom Expression }
Unary      <- { "Unary" { Atom Primary } }
Attribute  <- { "Attribute" { Load (LoadAttr / MethodCall)+ } }
LoadAttr   <- { "LoadAttr" Atom }
LoadMethod <- { "LoadMethod" Atom }
MethodCall <- { "MethodCall" { LoadMethod CallParams } }

ScopeId    <- { "ScopeId" Atom }

Primary    <- Value
            / Lambda
            / Load
            / Expression

Lambda     <- { "Lambda" { Params Code } }
            / { "Lambda" { ScopeId Params Code } }

# Callable Parameter rules
Params     <- ParamsMult / ParamsOne / ParamsNone
ParamsMult <- { "Params" { Param+ } }
ParamsOne  <- { "Params" Param }
ParamsNone <-
Param      <- { "Param" Atom }

# Call Site rules
Call       <- { "Call" { Load CallParams } }
CallParams <- CallPMult / CallPOne / CallPNone
CallPMult  <- { Expression+ }
CallPOne   <- Expression
CallPNone  <- 

Value      <- { "Value" Number }

Number     <- { "Number" Atom }

Load       <- { "Load" Atom  }
Store      <- { "Store" Atom  }
StoreLex   <- { "StoreLex" Atom  }

Atom       <- !{ .* } .
